var search_data = {"index":{"searchIndex":["actor","actorbehavior","alarmclock","bidirectionalmotordriver","binarybehavior","boiler","butler","command","commandalarmclock","commandcancel","commandnotfound","commandtime","commandweather","button","changebehavior","chart","clock","device","dhtdriver","door","dummydriver","entity","entitybehavior","entitybehaviorhelpers","entityclassmethods","entitydata","dataentity","entityevents","entityevent","entityjob","delayed","entityjobhandler","entityvisualization","classmethods","facadeblind","fan","flat","floor","gpiodriver","home","house","httpdriver","humidity","indication","light","microphone","motion","onewiredriver","parsetime","pid","placement","pocketsphinxdriver","remote","methodproxy","room","sensor","slider","speaker","tts","switch","temperature","uartdriver","user","weather","widget","commandcalculator()","[]()","add()","add_with_replace()","adjustment_percent()","adjustment_percent=()","all_off!()","ancestors_and_self()","assigned?()","at()","at_command()","at_schedule()","average_value()","bcm_pins()","before()","binary()","binary?()","blink()","blink()","brightness()","call()","call()","cancel()","caption_class()","chart_type()","contra_pause_time()","contra_pause_time=()","current_direction()","current_position()","data()","data_attributes()","data_js()","day?()","delay()","delete_alarm()","description()","description()","description()","description_data()","description_data()","detect_command()","detect_command()","devices()","devs()","disabled?()","do_schedule()","do_schedule()","down!()","down_motor()","drivers()","drivers_names()","enabled=()","enabled?()","enqueue()","entity_types()","entity_types_downcase()","every()","execute_remote_method()","execute_sql()","extended()","generate_new_name()","get_alarm()","get_driver_value()","get_driver_value()","get_driver_value()","get_driver_value()","get_driver_value()","get_port()","holiday?()","human_value()","human_value()","illumination()","image()","included()","indication_at()","init()","init()","init()","init()","init()","init()","invert_driver_value?()","lamplight()","last_indication()","last_indication_interval()","last_indication_time()","last_motion_interval()","last_motion_time()","light_off!()","log()","mail()","max_attempts()","max_run_time()","menu_entities()","method_missing()","method_missing()","method_missing()","method_missing()","models()","new()","new()","new()","new()","night?()","noon_time()","now()","off!()","off=()","off?()","on!()","on=()","on?()","on_finish_step()","on_stop()","opposite_value()","options()","parse_name_difference()","parse_time()","perform()","phrases()","phrases()","phrases()","phrases()","phrases()","phrases()","pin_no()","play()","play_alarm()","play_sound()","poll()","position()","position_range=()","power()","redirect_to()","register_attributes()","register_events()","require_entity_classes()","required_methods()","run_command()","run_command()","run_command()","run_command()","run_command()","run_command()","run_command()","say()","scan()","scan()","scan()","scan()","set_alarm()","set_driver_value()","set_driver_value()","set_driver_value()","set_driver_value()","set_driver_value()","set_position!()","set_position_and_tilt!()","set_positions!()","set_tilt!()","speak()","startup()","stop!()","stop_thread()","success()","sun_azimuth()","sun_azimuth()","sun_elevation()","sun_tilt()","sunrise_time()","sunrise_time()","sunset_time()","sunset_time()","switch!()","talk()","tell()","text()","text()","text()","text()","text()","text()","tilt()","tilt_range=()","time()","time_words()","to_s()","to_s()","types()","up!()","up_motor()","value_at()","wait_for()","watch()","watch()","weather_text()","write_value()"],"longSearchIndex":["actor","actorbehavior","alarmclock","bidirectionalmotordriver","binarybehavior","boiler","butler","butler::command","butler::commandalarmclock","butler::commandcancel","butler::commandnotfound","butler::commandtime","butler::commandweather","button","changebehavior","chart","clock","device","dhtdriver","door","dummydriver","entity","entitybehavior","entitybehaviorhelpers","entityclassmethods","entitydata","entitydata::dataentity","entityevents","entityevents::entityevent","entityjob","entityjob::delayed","entityjobhandler","entityvisualization","entityvisualization::classmethods","facadeblind","fan","flat","floor","gpiodriver","home","house","httpdriver","humidity","indication","light","microphone","motion","onewiredriver","parsetime","pid","placement","pocketsphinxdriver","remote","remote::methodproxy","room","sensor","slider","speaker","speaker::tts","switch","temperature","uartdriver","user","weather","widget","butler#commandcalculator()","entityclassmethods#[]()","entityevents#add()","entityevents#add_with_replace()","bidirectionalmotordriver#adjustment_percent()","bidirectionalmotordriver#adjustment_percent=()","placement#all_off!()","entityclassmethods#ancestors_and_self()","entityevents#assigned?()","entitybehaviorhelpers#at()","butler#at_command()","entity#at_schedule()","binarybehavior#average_value()","gpiodriver::bcm_pins()","entityjobhandler#before()","slider#binary()","bidirectionalmotordriver#binary?()","binarybehavior::blink()","entitybehaviorhelpers#blink()","room#brightness()","entityevents#call()","entityevents::entityevent#call()","entitybehaviorhelpers#cancel()","button#caption_class()","chart#chart_type()","bidirectionalmotordriver#contra_pause_time()","bidirectionalmotordriver#contra_pause_time=()","bidirectionalmotordriver#current_direction()","bidirectionalmotordriver#current_position()","entitydata#data()","room#data_attributes()","chart#data_js()","clock::day?()","entitybehaviorhelpers#delay()","alarmclock#delete_alarm()","bidirectionalmotordriver::description()","gpiodriver::description()","uartdriver::description()","dhtdriver::description_data()","gpiodriver::description_data()","butler::command#detect_command()","butler::commandnotfound#detect_command()","chart#devices()","chart#devs()","entity#disabled?()","binarybehavior#do_schedule()","pid#do_schedule()","bidirectionalmotordriver#down!()","bidirectionalmotordriver#down_motor()","entityclassmethods#drivers()","entityclassmethods#drivers_names()","entity#enabled=()","entity#enabled?()","entityjobhandler#enqueue()","entityclassmethods#entity_types()","entityclassmethods#entity_types_downcase()","entitybehaviorhelpers#every()","remote#execute_remote_method()","entityclassmethods#execute_sql()","bidirectionalmotordriver#extended()","entityclassmethods#generate_new_name()","alarmclock#get_alarm()","dhtdriver#get_driver_value()","dummydriver#get_driver_value()","gpiodriver#get_driver_value()","httpdriver#get_driver_value()","onewiredriver#get_driver_value()","uartdriver::get_port()","entitybehaviorhelpers#holiday?()","entityvisualization#human_value()","slider#human_value()","room#illumination()","entityvisualization#image()","changebehavior::included()","indication::indication_at()","actorbehavior#init()","device#init()","facadeblind#init()","humidity#init()","pid#init()","temperature#init()","switch#invert_driver_value?()","room#lamplight()","entity#last_indication()","entity#last_indication_interval()","entity#last_indication_time()","motion#last_motion_interval()","motion#last_motion_time()","placement#light_off!()","entitybehaviorhelpers#log()","entitybehaviorhelpers#mail()","entityjobhandler#max_attempts()","entityjobhandler#max_run_time()","entityclassmethods#menu_entities()","entitydata::dataentity#method_missing()","entityjobhandler#method_missing()","remote#method_missing()","remote::methodproxy#method_missing()","dhtdriver::models()","entitydata::dataentity::new()","entityevents::entityevent::new()","entityjobhandler::new()","remote::methodproxy::new()","clock::night?()","clock::noon_time()","entitybehaviorhelpers#now()","binarybehavior#off!()","binarybehavior#off=()","binarybehavior#off?()","binarybehavior#on!()","binarybehavior#on=()","binarybehavior#on?()","facadeblind#on_finish_step()","facadeblind#on_stop()","binarybehavior#opposite_value()","entitybehaviorhelpers#options()","entityclassmethods#parse_name_difference()","parsetime#parse_time()","entityjobhandler#perform()","butler#phrases()","butler::command#phrases()","butler::commandalarmclock#phrases()","butler::commandcancel#phrases()","butler::commandtime#phrases()","butler::commandweather#phrases()","gpiodriver#pin_no()","speaker::tts#play()","alarmclock#play_alarm()","alarmclock#play_sound()","dhtdriver#poll()","facadeblind#position()","facadeblind#position_range=()","light#power()","entityvisualization#redirect_to()","entityclassmethods#register_attributes()","entityclassmethods#register_events()","entityclassmethods#require_entity_classes()","bidirectionalmotordriver::required_methods()","butler#run_command()","butler::command#run_command()","butler::commandalarmclock#run_command()","butler::commandcancel#run_command()","butler::commandnotfound#run_command()","butler::commandtime#run_command()","butler::commandweather#run_command()","speaker::tts#say()","dhtdriver::scan()","gpiodriver::scan()","onewiredriver::scan()","uartdriver::scan()","alarmclock#set_alarm()","bidirectionalmotordriver#set_driver_value()","dummydriver#set_driver_value()","gpiodriver#set_driver_value()","onewiredriver#set_driver_value()","uartdriver#set_driver_value()","facadeblind#set_position!()","facadeblind#set_position_and_tilt!()","bidirectionalmotordriver#set_positions!()","facadeblind#set_tilt!()","speaker::tts#speak()","pid#startup()","bidirectionalmotordriver#stop!()","bidirectionalmotordriver#stop_thread()","entityjobhandler#success()","clock::sun_azimuth()","entitybehaviorhelpers#sun_azimuth()","clock::sun_elevation()","entitybehaviorhelpers#sun_tilt()","clock::sunrise_time()","entitybehaviorhelpers#sunrise_time()","clock::sunset_time()","entitybehaviorhelpers#sunset_time()","binarybehavior#switch!()","speaker::tts#talk()","speaker::tts#tell()","boiler#text()","humidity#text()","motion#text()","pid#text()","slider#text()","temperature#text()","facadeblind#tilt()","facadeblind#tilt_range=()","clock#time()","parsetime#time_words()","entityevents::entityevent#to_s()","entityjob#to_s()","entityclassmethods#types()","bidirectionalmotordriver#up!()","bidirectionalmotordriver#up_motor()","entity#value_at()","entitybehaviorhelpers#wait_for()","gpiodriver::watch()","pocketsphinxdriver#watch()","weather#weather_text()","entity#write_value()"],"info":[["Actor","","Actor.html","","<p>Базовый класс для всех устройств, которые активируют оборудование\n"],["ActorBehavior","","ActorBehavior.html","",""],["AlarmClock","","AlarmClock.html","",""],["BidirectionalMotorDriver","","BidirectionalMotorDriver.html","",""],["BinaryBehavior","","BinaryBehavior.html","",""],["Boiler","","Boiler.html","",""],["Butler","","Butler.html","",""],["Butler::Command","","Butler/Command.html","",""],["Butler::CommandAlarmClock","","Butler/CommandAlarmClock.html","",""],["Butler::CommandCancel","","Butler/CommandCancel.html","",""],["Butler::CommandNotFound","","Butler/CommandNotFound.html","",""],["Butler::CommandTime","","Butler/CommandTime.html","",""],["Butler::CommandWeather","","Butler/CommandWeather.html","",""],["Button","","Button.html","","<p>Виджет - кнопка. Если аттрибут <code>value</code> имеет значение 0 или 1 -\nкнопка работает как переключатель ON/OFF. …\n"],["ChangeBehavior","","ChangeBehavior.html","",""],["Chart","","Chart.html","","<p>Объект для отображения графиков\n"],["Clock","","Clock.html","",""],["Device","","Device.html","","<p>Базовый класс для всех устройств, которым соответствует какое-либо\nоборудование: датчики, реле, моторы …\n"],["DhtDriver","","DhtDriver.html","",""],["Door","","Door.html","","<p>Датчик открытия/закрытия двери\n"],["DummyDriver","","DummyDriver.html","",""],["Entity","","Entity.html","","<p>Базовый класс для всех объектов. От него наследуются все остальные объекты:\nпомещения, устройства, виджеты …\n"],["EntityBehavior","","EntityBehavior.html","",""],["EntityBehaviorHelpers","","EntityBehaviorHelpers.html","",""],["EntityClassMethods","","EntityClassMethods.html","",""],["EntityData","","EntityData.html","",""],["EntityData::DataEntity","","EntityData/DataEntity.html","",""],["EntityEvents","","EntityEvents.html","",""],["EntityEvents::EntityEvent","","EntityEvents/EntityEvent.html","",""],["EntityJob","","EntityJob.html","",""],["EntityJob::Delayed","","EntityJob/Delayed.html","",""],["EntityJobHandler","","EntityJobHandler.html","",""],["EntityVisualization","","EntityVisualization.html","",""],["EntityVisualization::ClassMethods","","EntityVisualization/ClassMethods.html","",""],["FacadeBlind","","FacadeBlind.html","",""],["Fan","","Fan.html","","<p>Вентилятор\n"],["Flat","","Flat.html","",""],["Floor","","Floor.html","",""],["GpioDriver","","GpioDriver.html","",""],["Home","","Home.html","",""],["House","","House.html","",""],["HttpDriver","","HttpDriver.html","",""],["Humidity","","Humidity.html","","<p>Датчик влажности\n"],["Indication","","Indication.html","",""],["Light","","Light.html","","<p>Лампа\n"],["Microphone","","Microphone.html","",""],["Motion","","Motion.html","","<p>Датчик движения\n"],["OneWireDriver","","OneWireDriver.html","",""],["ParseTime","","ParseTime.html","",""],["Pid","","Pid.html","","<p>Используется реккурентная формула u(t) = u(t — 1) + P (t) + I (t) + D (t);\nP (t) = Kp * {e (t) — e (t …\n"],["Placement","","Placement.html","",""],["PocketsphinxDriver","","PocketsphinxDriver.html","",""],["Remote","","Remote.html","","<p>Объект для управления удалённым устройством по протоколу HTTP. Удалённое\nустройство - это, как правило, …\n"],["Remote::MethodProxy","","Remote/MethodProxy.html","",""],["Room","","Room.html","",""],["Sensor","","Sensor.html","","<p>Базовый класс для всех устройств-датчиков. По расписанию опрашивает датчик\nи сохраняет значение в <code>value</code> …\n"],["Slider","","Slider.html","","<p>Виджет “Ползунок”\n"],["Speaker","","Speaker.html","",""],["Speaker::Tts","","Speaker/Tts.html","",""],["Switch","","Switch.html","","<p>Датчик типа “сухой контакт”\n"],["Temperature","","Temperature.html","","<p>Датчик температуры\n"],["UartDriver","","UartDriver.html","",""],["User","","User.html","",""],["Weather","","Weather.html","",""],["Widget","","Widget.html","","<p>Базовый класс для визуальных элементов\n"],["CommandCalculator","Butler","Butler.html#method-i-CommandCalculator","()",""],["[]","EntityClassMethods","EntityClassMethods.html#method-i-5B-5D","(ind)",""],["add","EntityEvents","EntityEvents.html#method-i-add","(event_name, prc, options = {})",""],["add_with_replace","EntityEvents","EntityEvents.html#method-i-add_with_replace","(event_name, prc)",""],["adjustment_percent","BidirectionalMotorDriver","BidirectionalMotorDriver.html#method-i-adjustment_percent","()","<p>default 5% of full time moving\n"],["adjustment_percent=","BidirectionalMotorDriver","BidirectionalMotorDriver.html#method-i-adjustment_percent-3D","(value)",""],["all_off!","Placement","Placement.html#method-i-all_off-21","(klass = nil)",""],["ancestors_and_self","EntityClassMethods","EntityClassMethods.html#method-i-ancestors_and_self","(class_limit = Entity, recurs_class = nil)",""],["assigned?","EntityEvents","EntityEvents.html#method-i-assigned-3F","(event_name)",""],["at","EntityBehaviorHelpers","EntityBehaviorHelpers.html#method-i-at","(run_time, &block)",""],["at_command","Butler","Butler.html#method-i-at_command","(*phrases, &block)",""],["at_schedule","Entity","Entity.html#method-i-at_schedule","(options = nil, &block)","<p>задаёт обработчик, вызываемый по расписанию\n<p>Параметры\n<p><code>every</code> - интервал. например 1.hour, 30.minutes, 10.seconds …\n"],["average_value","BinaryBehavior","BinaryBehavior.html#method-i-average_value","(interval)",""],["bcm_pins","GpioDriver","GpioDriver.html#method-c-bcm_pins","()",""],["before","EntityJobHandler","EntityJobHandler.html#method-i-before","(job)",""],["binary","Slider","Slider.html#method-i-binary","()",""],["binary?","BidirectionalMotorDriver","BidirectionalMotorDriver.html#method-i-binary-3F","()",""],["blink","BinaryBehavior","BinaryBehavior.html#method-c-blink","(args = {})",""],["blink","EntityBehaviorHelpers","EntityBehaviorHelpers.html#method-i-blink","(args = {}, &block_after)",""],["brightness","Room","Room.html#method-i-brightness","()",""],["call","EntityEvents","EntityEvents.html#method-i-call","(event_name, options = {})",""],["call","EntityEvents::EntityEvent","EntityEvents/EntityEvent.html#method-i-call","(*params)",""],["cancel","EntityBehaviorHelpers","EntityBehaviorHelpers.html#method-i-cancel","(job_name = nil)","<p>Удаляет задание с переданным именем или все задания\n"],["caption_class","Button","Button.html#method-i-caption_class","()",""],["chart_type","Chart","Chart.html#method-i-chart_type","()",""],["contra_pause_time","BidirectionalMotorDriver","BidirectionalMotorDriver.html#method-i-contra_pause_time","()",""],["contra_pause_time=","BidirectionalMotorDriver","BidirectionalMotorDriver.html#method-i-contra_pause_time-3D","(interval)",""],["current_direction","BidirectionalMotorDriver","BidirectionalMotorDriver.html#method-i-current_direction","()",""],["current_position","BidirectionalMotorDriver","BidirectionalMotorDriver.html#method-i-current_position","()",""],["data","EntityData","EntityData.html#method-i-data","()",""],["data_attributes","Room","Room.html#method-i-data_attributes","()",""],["data_js","Chart","Chart.html#method-i-data_js","(dt_from = period_default.ago, dt_to = Time.now)",""],["day?","Clock","Clock.html#method-c-day-3F","()",""],["delay","EntityBehaviorHelpers","EntityBehaviorHelpers.html#method-i-delay","(interval = 1.second, &block)",""],["delete_alarm","AlarmClock","AlarmClock.html#method-i-delete_alarm","()",""],["description","BidirectionalMotorDriver","BidirectionalMotorDriver.html#method-c-description","()",""],["description","GpioDriver","GpioDriver.html#method-c-description","()",""],["description","UartDriver","UartDriver.html#method-c-description","()",""],["description_data","DhtDriver","DhtDriver.html#method-c-description_data","()",""],["description_data","GpioDriver","GpioDriver.html#method-c-description_data","()",""],["detect_command","Butler::Command","Butler/Command.html#method-i-detect_command","(command)",""],["detect_command","Butler::CommandNotFound","Butler/CommandNotFound.html#method-i-detect_command","(command)",""],["devices","Chart","Chart.html#method-i-devices","()",""],["devs","Chart","Chart.html#method-i-devs","()",""],["disabled?","Entity","Entity.html#method-i-disabled-3F","()",""],["do_schedule","BinaryBehavior","BinaryBehavior.html#method-i-do_schedule","()",""],["do_schedule","Pid","Pid.html#method-i-do_schedule","()",""],["down!","BidirectionalMotorDriver","BidirectionalMotorDriver.html#method-i-down-21","()",""],["down_motor","BidirectionalMotorDriver","BidirectionalMotorDriver.html#method-i-down_motor","()",""],["drivers","EntityClassMethods","EntityClassMethods.html#method-i-drivers","()",""],["drivers_names","EntityClassMethods","EntityClassMethods.html#method-i-drivers_names","()",""],["enabled=","Entity","Entity.html#method-i-enabled-3D","(enabled)",""],["enabled?","Entity","Entity.html#method-i-enabled-3F","()",""],["enqueue","EntityJobHandler","EntityJobHandler.html#method-i-enqueue","(job)",""],["entity_types","EntityClassMethods","EntityClassMethods.html#method-i-entity_types","()",""],["entity_types_downcase","EntityClassMethods","EntityClassMethods.html#method-i-entity_types_downcase","()",""],["every","EntityBehaviorHelpers","EntityBehaviorHelpers.html#method-i-every","(run_interval, options = {}, &block)","<p>Устанавливает обработчик по расписанию\n"],["execute_remote_method","Remote","Remote.html#method-i-execute_remote_method","(remote_entity_name, method_name, *arguments)",""],["execute_sql","EntityClassMethods","EntityClassMethods.html#method-i-execute_sql","(*sql_array)",""],["extended","BidirectionalMotorDriver","BidirectionalMotorDriver.html#method-i-extended","(base)",""],["generate_new_name","EntityClassMethods","EntityClassMethods.html#method-i-generate_new_name","(source_name, target_name, current_name)",""],["get_alarm","AlarmClock","AlarmClock.html#method-i-get_alarm","()",""],["get_driver_value","DhtDriver","DhtDriver.html#method-i-get_driver_value","()",""],["get_driver_value","DummyDriver","DummyDriver.html#method-i-get_driver_value","()",""],["get_driver_value","GpioDriver","GpioDriver.html#method-i-get_driver_value","()",""],["get_driver_value","HttpDriver","HttpDriver.html#method-i-get_driver_value","()",""],["get_driver_value","OneWireDriver","OneWireDriver.html#method-i-get_driver_value","()",""],["get_port","UartDriver","UartDriver.html#method-c-get_port","(address)",""],["holiday?","EntityBehaviorHelpers","EntityBehaviorHelpers.html#method-i-holiday-3F","(time = nil)",""],["human_value","EntityVisualization","EntityVisualization.html#method-i-human_value","()","<p>instance methods\n"],["human_value","Slider","Slider.html#method-i-human_value","()",""],["illumination","Room","Room.html#method-i-illumination","()","<p>def presense\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">value!</span>=<span class=\"ruby-value\">0</span>\n</pre>\n<p>end\n"],["image","EntityVisualization","EntityVisualization.html#method-i-image","()",""],["included","ChangeBehavior","ChangeBehavior.html#method-c-included","(base)",""],["indication_at","Indication","Indication.html#method-c-indication_at","(e, dt)",""],["init","ActorBehavior","ActorBehavior.html#method-i-init","()",""],["init","Device","Device.html#method-i-init","()",""],["init","FacadeBlind","FacadeBlind.html#method-i-init","()",""],["init","Humidity","Humidity.html#method-i-init","()",""],["init","Pid","Pid.html#method-i-init","()",""],["init","Temperature","Temperature.html#method-i-init","()",""],["invert_driver_value?","Switch","Switch.html#method-i-invert_driver_value-3F","()",""],["lamplight","Room","Room.html#method-i-lamplight","()",""],["last_indication","Entity","Entity.html#method-i-last_indication","(value = nil)","<p>возвращает последнее значение - обект Indication\n<p><code>value</code> - значение, если не указано, возвращается время …\n\n"],["last_indication_interval","Entity","Entity.html#method-i-last_indication_interval","(value = nil)","<p>возвращает время, прошедшее с последнего изменения значения\n"],["last_indication_time","Entity","Entity.html#method-i-last_indication_time","(value = nil)","<p>возвращает время последнего изменения значения\n<p><code>value</code> - значение, если не указано, возвращается время любого …\n\n"],["last_motion_interval","Motion","Motion.html#method-i-last_motion_interval","()",""],["last_motion_time","Motion","Motion.html#method-i-last_motion_time","()",""],["light_off!","Placement","Placement.html#method-i-light_off-21","()",""],["log","EntityBehaviorHelpers","EntityBehaviorHelpers.html#method-i-log","(&block)",""],["mail","EntityBehaviorHelpers","EntityBehaviorHelpers.html#method-i-mail","(body, options = {})","<p>Sends email to user/users\n<p>Attributes\n<p>*<code>body</code> - body text *<code>options</code>\n"],["max_attempts","EntityJobHandler","EntityJobHandler.html#method-i-max_attempts","()",""],["max_run_time","EntityJobHandler","EntityJobHandler.html#method-i-max_run_time","()",""],["menu_entities","EntityClassMethods","EntityClassMethods.html#method-i-menu_entities","(root = nil)",""],["method_missing","EntityData::DataEntity","EntityData/DataEntity.html#method-i-method_missing","(method_sym, *arguments, &block)",""],["method_missing","EntityJobHandler","EntityJobHandler.html#method-i-method_missing","(method, *args)",""],["method_missing","Remote","Remote.html#method-i-method_missing","(method_sym, *arguments, &block)",""],["method_missing","Remote::MethodProxy","Remote/MethodProxy.html#method-i-method_missing","(method_sym, *arguments, &block)",""],["models","DhtDriver","DhtDriver.html#method-c-models","()",""],["new","EntityData::DataEntity","EntityData/DataEntity.html#method-c-new","(entity)",""],["new","EntityEvents::EntityEvent","EntityEvents/EntityEvent.html#method-c-new","(name, code, options = {})",""],["new","EntityJobHandler","EntityJobHandler.html#method-c-new","(obj, options = {})",""],["new","Remote::MethodProxy","Remote/MethodProxy.html#method-c-new","(owner, remote_entity_name)",""],["night?","Clock","Clock.html#method-c-night-3F","()",""],["noon_time","Clock","Clock.html#method-c-noon_time","()",""],["now","EntityBehaviorHelpers","EntityBehaviorHelpers.html#method-i-now","()",""],["off!","BinaryBehavior","BinaryBehavior.html#method-i-off-21","(options = {})",""],["off=","BinaryBehavior","BinaryBehavior.html#method-i-off-3D","(v)",""],["off?","BinaryBehavior","BinaryBehavior.html#method-i-off-3F","()",""],["on!","BinaryBehavior","BinaryBehavior.html#method-i-on-21","(options = {})",""],["on=","BinaryBehavior","BinaryBehavior.html#method-i-on-3D","(v)",""],["on?","BinaryBehavior","BinaryBehavior.html#method-i-on-3F","()",""],["on_finish_step","FacadeBlind","FacadeBlind.html#method-i-on_finish_step","(step)",""],["on_stop","FacadeBlind","FacadeBlind.html#method-i-on_stop","()",""],["opposite_value","BinaryBehavior","BinaryBehavior.html#method-i-opposite_value","()",""],["options","EntityBehaviorHelpers","EntityBehaviorHelpers.html#method-i-options","(opt)",""],["parse_name_difference","EntityClassMethods","EntityClassMethods.html#method-i-parse_name_difference","(source, new)",""],["parse_time","ParseTime","ParseTime.html#method-i-parse_time","(s, options = {})","<p>require &#39;rails/all&#39;\n"],["perform","EntityJobHandler","EntityJobHandler.html#method-i-perform","()",""],["phrases","Butler","Butler.html#method-i-phrases","()",""],["phrases","Butler::Command","Butler/Command.html#method-i-phrases","()",""],["phrases","Butler::CommandAlarmClock","Butler/CommandAlarmClock.html#method-i-phrases","()",""],["phrases","Butler::CommandCancel","Butler/CommandCancel.html#method-i-phrases","()",""],["phrases","Butler::CommandTime","Butler/CommandTime.html#method-i-phrases","()",""],["phrases","Butler::CommandWeather","Butler/CommandWeather.html#method-i-phrases","()",""],["pin_no","GpioDriver","GpioDriver.html#method-i-pin_no","()",""],["play","Speaker::Tts","Speaker/Tts.html#method-i-play","(file)",""],["play_alarm","AlarmClock","AlarmClock.html#method-i-play_alarm","()",""],["play_sound","AlarmClock","AlarmClock.html#method-i-play_sound","(file_name)",""],["poll","DhtDriver","DhtDriver.html#method-i-poll","()",""],["position","FacadeBlind","FacadeBlind.html#method-i-position","()",""],["position_range=","FacadeBlind","FacadeBlind.html#method-i-position_range-3D","(r)",""],["power","Light","Light.html#method-i-power","()",""],["redirect_to","EntityVisualization","EntityVisualization.html#method-i-redirect_to","(target)","<p>Перенаправляет браузер на заданный объект либо страницу\n<p>Параметры: <code>target</code> : Entity || String\n<p>Пример вызова: …\n"],["register_attributes","EntityClassMethods","EntityClassMethods.html#method-i-register_attributes","(*args)",""],["register_events","EntityClassMethods","EntityClassMethods.html#method-i-register_events","(*args)",""],["require_entity_classes","EntityClassMethods","EntityClassMethods.html#method-i-require_entity_classes","()",""],["required_methods","BidirectionalMotorDriver","BidirectionalMotorDriver.html#method-c-required_methods","()",""],["run_command","Butler","Butler.html#method-i-run_command","(command, options = {})",""],["run_command","Butler::Command","Butler/Command.html#method-i-run_command","(command, options = {})",""],["run_command","Butler::CommandAlarmClock","Butler/CommandAlarmClock.html#method-i-run_command","(command, options = {})",""],["run_command","Butler::CommandCancel","Butler/CommandCancel.html#method-i-run_command","(command, options = {})",""],["run_command","Butler::CommandNotFound","Butler/CommandNotFound.html#method-i-run_command","(command, options = {})",""],["run_command","Butler::CommandTime","Butler/CommandTime.html#method-i-run_command","(command, options = {})",""],["run_command","Butler::CommandWeather","Butler/CommandWeather.html#method-i-run_command","(command, options = {})",""],["say","Speaker::Tts","Speaker/Tts.html#method-i-say","(phrase)",""],["scan","DhtDriver","DhtDriver.html#method-c-scan","()",""],["scan","GpioDriver","GpioDriver.html#method-c-scan","()",""],["scan","OneWireDriver","OneWireDriver.html#method-c-scan","()",""],["scan","UartDriver","UartDriver.html#method-c-scan","()",""],["set_alarm","AlarmClock","AlarmClock.html#method-i-set_alarm","(time)",""],["set_driver_value","BidirectionalMotorDriver","BidirectionalMotorDriver.html#method-i-set_driver_value","(target_position)",""],["set_driver_value","DummyDriver","DummyDriver.html#method-i-set_driver_value","(v)",""],["set_driver_value","GpioDriver","GpioDriver.html#method-i-set_driver_value","(v)",""],["set_driver_value","OneWireDriver","OneWireDriver.html#method-i-set_driver_value","(v)",""],["set_driver_value","UartDriver","UartDriver.html#method-i-set_driver_value","(v)",""],["set_position!","FacadeBlind","FacadeBlind.html#method-i-set_position-21","(position)",""],["set_position_and_tilt!","FacadeBlind","FacadeBlind.html#method-i-set_position_and_tilt-21","(position, tilt)",""],["set_positions!","BidirectionalMotorDriver","BidirectionalMotorDriver.html#method-i-set_positions-21","(*positions)",""],["set_tilt!","FacadeBlind","FacadeBlind.html#method-i-set_tilt-21","(tilt)",""],["speak","Speaker::Tts","Speaker/Tts.html#method-i-speak","(phrase)",""],["startup","Pid","Pid.html#method-i-startup","()",""],["stop!","BidirectionalMotorDriver","BidirectionalMotorDriver.html#method-i-stop-21","(at_position = nil)",""],["stop_thread","BidirectionalMotorDriver","BidirectionalMotorDriver.html#method-i-stop_thread","()",""],["success","EntityJobHandler","EntityJobHandler.html#method-i-success","(job)",""],["sun_azimuth","Clock","Clock.html#method-c-sun_azimuth","()",""],["sun_azimuth","EntityBehaviorHelpers","EntityBehaviorHelpers.html#method-i-sun_azimuth","()","<p>Возвращает азимут солнца, в градусах. Направление от севера по часовой\nстрелке\n"],["sun_elevation","Clock","Clock.html#method-c-sun_elevation","()",""],["sun_tilt","EntityBehaviorHelpers","EntityBehaviorHelpers.html#method-i-sun_tilt","()","<p>Возвращает угол возвышения солнца(от горизонта), в градусах.\n"],["sunrise_time","Clock","Clock.html#method-c-sunrise_time","()",""],["sunrise_time","EntityBehaviorHelpers","EntityBehaviorHelpers.html#method-i-sunrise_time","()","<p>Returns sunrise time\n"],["sunset_time","Clock","Clock.html#method-c-sunset_time","()",""],["sunset_time","EntityBehaviorHelpers","EntityBehaviorHelpers.html#method-i-sunset_time","()","<p>Returns sunset time\n"],["switch!","BinaryBehavior","BinaryBehavior.html#method-i-switch-21","(options = {})",""],["talk","Speaker::Tts","Speaker/Tts.html#method-i-talk","(phrase)",""],["tell","Speaker::Tts","Speaker/Tts.html#method-i-tell","(phrase)",""],["text","Boiler","Boiler.html#method-i-text","()",""],["text","Humidity","Humidity.html#method-i-text","()",""],["text","Motion","Motion.html#method-i-text","()",""],["text","Pid","Pid.html#method-i-text","()",""],["text","Slider","Slider.html#method-i-text","()",""],["text","Temperature","Temperature.html#method-i-text","()",""],["tilt","FacadeBlind","FacadeBlind.html#method-i-tilt","()",""],["tilt_range=","FacadeBlind","FacadeBlind.html#method-i-tilt_range-3D","(r)",""],["time","Clock","Clock.html#method-i-time","()",""],["time_words","ParseTime","ParseTime.html#method-i-time_words","(t)",""],["to_s","EntityEvents::EntityEvent","EntityEvents/EntityEvent.html#method-i-to_s","()",""],["to_s","EntityJob","EntityJob.html#method-i-to_s","()",""],["types","EntityClassMethods","EntityClassMethods.html#method-i-types","()",""],["up!","BidirectionalMotorDriver","BidirectionalMotorDriver.html#method-i-up-21","()",""],["up_motor","BidirectionalMotorDriver","BidirectionalMotorDriver.html#method-i-up_motor","()",""],["value_at","Entity","Entity.html#method-i-value_at","(dt)","<p>возвращает значение на заданное время\n"],["wait_for","EntityBehaviorHelpers","EntityBehaviorHelpers.html#method-i-wait_for","(interval = 1.second, &block)",""],["watch","GpioDriver","GpioDriver.html#method-c-watch","(&block)",""],["watch","PocketsphinxDriver","PocketsphinxDriver.html#method-i-watch","()",""],["weather_text","Weather","Weather.html#method-i-weather_text","()",""],["write_value","Entity","Entity.html#method-i-write_value","(v)","<p>Устанавливает и записывает значение (атрибут value)\n<p>Параметры\n<p><code>v</code> : Number - значение\n"]]}}